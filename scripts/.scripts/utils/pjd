#!/bin/bash

set -e

print_bold() {
    echo -e "\033[1m$1\033[0m"
}

print_help() {
    echo "Usage: $0 [OPTIONS]"
    echo
    echo "Prepare a JetBrains development container."
    echo
    echo "Options:"
    echo "  -h, --help                      Show this help message and exit"
    echo "  -i, --image IMAGE               Specify the base image to use"
    echo "  -n, --name NAME                 Specify the container name (default is derived from image)"
    echo "  -m, --mounts SRC:DEST[:TYPE]    Add additional mounts (TYPE defaults to 'bind')"
    echo
    echo "This script will:"
    echo "  - Prompt you to choose an IDE (CLion, IntelliJ IDEA, PyCharm)"
    echo "  - Verify the required environment variables for the IDE"
    echo "  - Build a temporary container image and run it with GUI support"
}

select_base_image() {
    echo "Available images:"
    podman images --format "{{.Repository}}:{{.Tag}}"

    printf "\nEnter part of the image name (or regex) to filter [default: %s]: " "$DEFAULT_CONTAINER_IMAGE"
    read -r IMAGE_FILTER

    if [ -z "$IMAGE_FILTER" ]; then
        echo "No selection made. Using default image: $DEFAULT_CONTAINER_IMAGE"
        CONTAINER_IMAGE=$DEFAULT_CONTAINER_IMAGE
        return
    fi

    mapfile -t MATCHING_IMAGES < <(podman images --format "{{.Repository}}:{{.Tag}}" | grep -Ei "$IMAGE_FILTER")

    if [ "${#MATCHING_IMAGES[@]}" -eq 0 ]; then
        echo "No matching images found. Exiting..."
        exit 1

    elif [ "${#MATCHING_IMAGES[@]}" -eq 1 ]; then
        CONTAINER_IMAGE="${MATCHING_IMAGES[0]}"
        echo "Only one match found. Selected: $CONTAINER_IMAGE"
        return

    else
        echo "Multiple images matched:"
        for i in "${!MATCHING_IMAGES[@]}"; do
            printf "%3d) %s\n" $((i + 1)) "${MATCHING_IMAGES[$i]}"
        done

        printf "\nEnter the number of the image to select, or type full image name: "
        read -r USER_INPUT

        if [[ "$USER_INPUT" =~ ^[0-9]+$ ]] && [ "$USER_INPUT" -ge 1 ] && [ "$USER_INPUT" -le "${#MATCHING_IMAGES[@]}" ]; then
            CONTAINER_IMAGE="${MATCHING_IMAGES[$((USER_INPUT - 1))]}"
            echo "You selected: $CONTAINER_IMAGE"
        elif printf "%s\n" "${MATCHING_IMAGES[@]}" | grep -qx "$USER_INPUT"; then
            CONTAINER_IMAGE="$USER_INPUT"
            echo "You selected: $CONTAINER_IMAGE"
        else
            echo "Invalid selection. Exiting..."
            exit 1
        fi
    fi
}

select_ide() {
    echo "Select the JetBrains IDE to run:"
    select ide in "CLion" "IntelliJ IDEA" "PyCharm"; do
        case $ide in
            "CLion") IDE_NAME="clion"; ENV_VAR="CLION_DIR"; break ;;
            "IntelliJ IDEA") IDE_NAME="idea"; ENV_VAR="IDEA_DIR"; break ;;
            "PyCharm") IDE_NAME="pycharm"; ENV_VAR="PYCHARM_DIR"; break ;;
            *) echo "Invalid option. Try again." ;;
        esac
    done
}

ensure_jetbrains_config() {
    CONFIG_DIR="${HOME}/.config/JetBrains"
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
        echo "Created JetBrains config directory: $CONFIG_DIR"
    fi
}

check_env_variable() {
    IDE_PATH="${!ENV_VAR:-}"

    if [[ -n "$IDE_PATH" && -x "${IDE_PATH}/bin/${IDE_NAME}.sh" ]]; then
        return
    fi

    echo "Environment variable $ENV_VAR not set or invalid."
    printf "Would you like to manually enter the path to %s? (y/n): " "$ide"
    read -r REPLY
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
        printf "Enter the full path to the %s installation directory: " "$ide"
        read -r MANUAL_PATH
        if [[ -x "$(realpath ${MANUAL_PATH})/bin/${IDE_NAME}.sh" ]]; then
            IDE_PATH="$MANUAL_PATH"
            return
        else
            echo "ERROR: '${MANUAL_PATH}/bin/${IDE_NAME}.sh' not found or not executable."
            exit 1
        fi
    else
        echo "ERROR: ${ide} not available and no manual path provided."
        echo "Please set the environment variable ${ENV_VAR} or rerun the script."
        exit 1
    fi
}

check_existing_container() {
    if podman ps -a --format "{{.Names}}" | grep -q "^${CONTAINER_NAME}$"; then
        echo "A container named '${CONTAINER_NAME}' already exists."
        printf "Would you like to rebuild it? (y/n): "
        read -r REBUILD_CHOICE
        if [[ "$REBUILD_CHOICE" =~ ^[Yy]$ ]]; then
            echo "Removing existing container..."
            podman rm -f "${CONTAINER_NAME}"
        else
            echo "Exiting without rebuilding."
            exit 0
        fi
    fi
}

setup_container_config() {
    ENVS="-e XDG_RUNTIME_DIR -e DISPLAY -e XAUTHORITY \
          -e NO_PROXY -e HTTP_PROXY -e HTTPS_PROXY \
          -e no_proxy -e http_proxy -e https_proxy"

    MOUNTS="--mount type=bind,source=${HOME}/.gitconfig,target=/root/.gitconfig \
            --mount type=bind,source=${HOME}/.ssh,target=/root/.ssh \
            --mount type=bind,source=${IDE_PATH},target=/${IDE_NAME} \
            --mount type=bind,source=${LOCAL_DEV_DIR},target=${LOCAL_DEV_DIR} \
            --mount type=bind,source=${XDG_RUNTIME_DIR},target=${XDG_RUNTIME_DIR} \
            --mount type=bind,source=/tmp/.X11-unix,target=/tmp/.X11-unix \
            --mount type=bind,source=${HOME}/.config/JetBrains,target=/root/.config/JetBrains \
            --mount type=bind,source=${HOME}/.cache/JetBrains,target=/root/.cache/JetBrains \
            --mount type=bind,source=${HOME}/.local/share/JetBrains,target=/root/.local/share/JetBrains"

    if [ ${#ADDITIONAL_MOUNTS[@]} -gt 0 ]; then
        for mount in "${ADDITIONAL_MOUNTS[@]}"; do
            IFS=':' read -r SRC DEST TYPE <<< "$mount"
            ABS_SRC=$(realpath -m "$SRC")
            MOUNT_OPT="type=${TYPE:-bind},source=${ABS_SRC},target=${DEST}"
            MOUNTS="$MOUNTS --mount $MOUNT_OPT"
        done
    fi

    if [ -n "$WAYLAND_DISPLAY" ] || [ "$XDG_SESSION_TYPE" = "wayland" ]; then
        print_bold "Detected Wayland session, adding Wayland configuration"
        if [ -z "$XAUTHORITY" ]; then
            XAUTHORITY="$HOME/.Xauthority"
            if [ ! -f "$XAUTHORITY" ]; then
                echo "Warning: XAUTHORITY not set and default file not found"
            fi
        fi

        if [ -f "$XAUTHORITY" ]; then
            MOUNTS="$MOUNTS --mount type=bind,source=${XAUTHORITY},target=${XAUTHORITY}"
        fi
    else
        print_bold "Using X11 configuration"
    fi
}

run_container() {
    podman run --name "${CONTAINER_NAME}" \
        -d -it --rm \
        --net=host --pid=host --ipc=host \
        --privileged \
        --http-proxy=false \
        --security-opt label=disable \
        ${ENVS} \
        ${MOUNTS} \
        "${CONTAINER_NAME}"
}

write_containerfile() {
    cat > "$CONTAINERFILE_PATH" <<EOF
FROM ${CONTAINER_IMAGE}

RUN if ! command -v microdnf &> /dev/null && command -v dnf &> /dev/null; then \\
      dnf install -y microdnf; \\
    fi

RUN microdnf install --setopt=install_weak_deps=0 -y \\
  git git-lfs gdb gdb-gdbserver gcc-c++ perf strace valgrind \\
  curl unzip tar findutils grep xterm procps-ng unzip firefox bash-completion

RUN microdnf install --setopt=install_weak_deps=0 -y \\
  libXtst libXrender libXext freetype libXi libicu

ENTRYPOINT ["/${IDE_NAME}/bin/${IDE_NAME}"]
EOF
}

build_container() {
    podman build -t "${CONTAINER_NAME}" -f "$CONTAINERFILE_PATH"
    rm -f "$CONTAINERFILE_PATH"
}

set_container_name() {
    if [[ -z "$CUSTOM_CONTAINER_NAME" ]]; then
        IMAGE_BASE_NAME=$(echo "${CONTAINER_IMAGE}" | awk -F'[:/]' '{print $(NF-1)}')
        IMAGE_TAG=$(echo "${CONTAINER_IMAGE}" | awk -F'[:]' '{print $NF}')
        CONTAINER_NAME="jetbrains-${IMAGE_BASE_NAME}-${IMAGE_TAG}-${IDE_NAME}"
    else
        CONTAINER_NAME="$CUSTOM_CONTAINER_NAME"
    fi
}

#########################
#### VARIABLES      #####
#########################
DEFAULT_CONTAINER_IMAGE="docker.io/library/almalinux:8.10-minimal-20250411"
CONTAINER_IMAGE=""
CONTAINERFILE_PATH="/tmp/Containerfile"
LOCAL_DEV_DIR="${HOME}/Projects"
CUSTOM_CONTAINER_NAME=""
ADDITIONAL_MOUNTS=()

#########################
#### PARSE CLI      #####
#########################
while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help)
        print_help
        exit 0
        ;;
    -i|--image)
        CONTAINER_IMAGE="$2"
        shift 2
        ;;
    -n|--name)
        CUSTOM_CONTAINER_NAME="$2"
        shift 2
        ;;
    -m|--mounts)
        ADDITIONAL_MOUNTS+=("$2")
        if ! echo "$2" | grep -q ":"; then
            echo "Error: Mount format should be 'source:destination[:type]'"
            exit 1
        fi
        shift 2
        ;;
    *)
        echo "Unknown option: $1"
        exit 1
        ;;
    esac
done

select_ide
ensure_jetbrains_config
check_env_variable

if [[ -z "$CONTAINER_IMAGE" ]]; then
    select_base_image
fi

set_container_name
check_existing_container

print_bold "Setting up a JetBrains container with the following properties:"
print_bold "  - name: ${CONTAINER_NAME}"
print_bold "  - image: ${CONTAINER_IMAGE}"
print_bold "  - IDE: ${IDE_NAME}"
if [ ${#ADDITIONAL_MOUNTS[@]} -gt 0 ]; then
    print_bold "  - Additional mounts:"
    for mount in "${ADDITIONAL_MOUNTS[@]}"; do
        IFS=':' read -r SRC DEST TYPE <<< "$mount"
        ABS_SRC=$(realpath -m "$SRC")
        print_bold "      - $ABS_SRC:$DEST${TYPE:+:$TYPE}"
    done
fi
echo ""

write_containerfile
build_container
setup_container_config
run_container