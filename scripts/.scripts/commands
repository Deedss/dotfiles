#!/bin/bash
###############################################################################
##### SYSTEM UPDATE                                                     #######
###############################################################################
update() {
    echo '-------------------------'
    echo '-------- UPDATE ---------'
    echo '-------------------------'
    if [[ $(lsb_release -is) == "Debian" || $(lsb_release -is) == "Ubuntu" ]]; then
        sudo apt update && sudo apt upgrade
    elif [[ $(lsb_release -is) == "Fedora" ]]; then
        sudo dnf update --refresh
    fi
    echo ''

    echo '-------------------------'
    echo '-------- FLATPAK --------'
    echo '-------------------------'
    flatpak update -y
    echo ''

    __update-rust
    __update-neovim
    __update-fzf
}

###############################################################################
##### UPDATE MAJOR TOOLS                                                #######
###############################################################################
__update-rust() {
    echo '-------------------------'
    echo '---------- RUST ---------'
    echo '-------------------------'
    rustup update
    cargo binstall --no-confirm \
        zoxide bat eza fd-find ripgrep sd procs fnm just
    echo ''
}

__update-neovim() {
    echo '-------------------------'
    echo '-------- NEOVIM ---------'
    echo '-------------------------'
    curl -L https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz -o /tmp/nvim-linux64.tar.gz
    rm -rf ~/Software/nvim-linux64
    tar -C ~/Software -xzf /tmp/nvim-linux64.tar.gz
    echo ''
}

__update-fzf() {
    echo '-------------------------'
    echo '---------- FZF ----------'
    echo '-------------------------'
    git -C ~/Software/fzf pull
    ~/Software/fzf/install --bin
    echo ''
}

###############################################################################
####### BACKUP                                                           ######
###############################################################################
tar-pack() {
    local filename=$(basename "$1")
    tar --zstd -cvf "${filename}.tar.zst" "$1"
}

tar-unpack() {
    tar --zstd -xvf "$1"
}

backup-files() {
    cd ~ || exit
    # List of directories and files to back up
    local items=(
        ".config/BraveSoftware"
        ".dotfiles"
        "Private"
        "Work"
        "Projects"
        ".ssh"
        ".gitconfig"
    )

    for item in "${items[@]}"; do
        if [[ -e "$item" ]]; then
            tar-pack "$item"
        else
            echo "Skipping $item: does not exist."
        fi
    done
}
