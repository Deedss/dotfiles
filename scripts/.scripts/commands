#!/bin/bash
###############################################################################
##### SYSTEM UPDATE                                                     #######
###############################################################################
function update(){
    echo '-------------------------'
    echo '-------- UPDATE ---------'
    echo '-------------------------'

    if [[ $(lsb_release -is) == "Debian" || $(lsb_release -is) == "Ubuntu" ]]; then
        sudo apt update && sudo apt upgrade
    elif [[ $(lsb_release -is) == "Fedora" ]]; then
        sudo dnf update --refresh
    elif [[ $(lsb_release -is) == "openSUSE" ]]; then
        sudo zypper dup
    else
        echo "Unsupported distribution. Update command not available."
    fi
    echo ''

    echo '-------------------------'
    echo '-------- FLATPAK --------'
    echo '-------------------------'
    flatpak update -y

    echo ''
}

###############################################################################
##### UPDATE MAJOR TOOLS                                                #######
###############################################################################
function update-tools(){
    __update-rust
    __update-starship
    __update-emscripten
    # __update-espIdf
    __update_helix
}

function __update-rust(){
    # Rust Update
    echo '-------------------------'
    echo '-------- RUST -----------'
    echo '-------------------------'
    rustup update
    echo ''
}

function __update-starship(){
    # Rust Update
    echo '-------------------------'
    echo '------ STARSHIP ---------'
    echo '-------------------------'
    curl -sS https://starship.rs/install.sh | sh -s -- --bin-dir ~/.local/bin -y
    echo ''
}

function __update-emscripten(){
    # # Emscripten update
    echo '-------------------------'
    echo '----- EMSCRIPTEN --------'
    echo '-------------------------'
    cd ~/Software/emsdk || exit
    pull=$(git pull)
    if [[ $pull != "Already up to date." ]];
    then
        ~/Software/emsdk/emsdk install latest
        ~/Software/emsdk/emsdk activate latest
    else
        echo "$pull"
    fi
    cd ~ || exit
    echo ''
}

function __update-espIdf(){
    # Esp-Idf
    echo '-------------------------'
    echo '------- ESP-IDF ---------'
    echo '-------------------------'
    cd ~/Software/esp-idf || exit
    pull=$(git pull)
    if [[ $pull != "Already up to date." ]];
    then
        git pull --recurse-submodules
        sh ~/Software/esp-idf/install.sh
    else
        echo "$pull"
    fi
    cd ~ || exit
    echo ''
}

function __update_helix(){
    echo '-------------------------'
    echo '-------- HELIX ----------'
    echo '-------------------------'
    cd ~/.local/bin || exit
    DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/helix-editor/helix/releases/latest" | jq -r '.assets[] | select(.name | endswith("-x86_64.AppImage")).browser_download_url')
    if [ "$DOWNLOAD_URL" ]; then
        curl -L -o helix "$DOWNLOAD_URL" && chmod +x helix
    fi
    cd ~ || exit
    echo ''
}

###############################################################################
####### BACKUP                                                           ######
###############################################################################
function tar-pack(){
    filename=$(basename "$1")
    tar --zstd -cvf "$filename".tar.zst "$1"
}

function tar-unpack(){
    tar --zstd -xvf "$1"
}
